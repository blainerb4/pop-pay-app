{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/matthewharrison/Desktop/pop-pay-app/client/src/components/pages/Login/login.pages.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport { Form, Button, Card, Alert } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useAuth } from '../../../contexts/AuthContext';\nimport { Link, useHistory } from 'react-router-dom'; //use histroy to redirect/navigate to dashboard after logged in or signedup\n\nexport default function Login() {\n  _s();\n\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const {\n    login\n  } = useAuth();\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const history = useHistory(); //were not loading my default so loading set to false\n  //use state emepty string because no error by default\n  //preventdefault prevents our app from refreshing\n  //if passwords do not match we do not complete the rest of the function and returns to origin state\n  //we use async function we wait for sign up to complete if theres an error it will tell user and if not sign up successfulk\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n\n    try {\n      setError('');\n      setLoading(true); //prevents user clicking signup mutliple times and creating duplicate accounts\n\n      await login(emailRef.current.value, passwordRef.current.value);\n      history.push('/dashboard'); //put url for dashboard in here\n    } catch {\n      setError('Failed to sign in');\n    }\n\n    setLoading(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-center mb-4\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"danger\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            id: \"email\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"email\",\n              ref: emailRef,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            id: \"password\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              ref: passwordRef,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            disabled: loading,\n            className: \"w-100\",\n            type: \"submit\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-100 text-center mt-3\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/forgot-password\",\n            children: \"Forgot password?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-100 text-center mt-2\",\n      children: [\"Need an account? \", /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/sign-up\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n} //button={loaidng} we do not want to be able to resubmit our form\n//curentuser starts off at null then sets itself, firebase sets local storage\n//and tokens so we can verify if we have a user already signed in\n//itll connect user for us using onauthstatechange\n//test current user {currentUser && currentUser.email} and     const {signup, currentUser} = useAuth()\n\n_s(Login, \"xS7CDVnY8QQuy0m/zSO9soJ9su4=\", false, function () {\n  return [useAuth, useHistory];\n});\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/matthewharrison/Desktop/pop-pay-app/client/src/components/pages/Login/login.pages.js"],"names":["React","useRef","useState","Form","Button","Card","Alert","useAuth","Link","useHistory","Login","emailRef","passwordRef","login","error","setError","loading","setLoading","history","handleSubmit","event","preventDefault","current","value","push"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,QAAvB,QAAsC,OAAtC;AACA,SAAQC,IAAR,EAAcC,MAAd,EAAsBC,IAAtB,EAA4BC,KAA5B,QAAwC,iBAAxC;AACA,OAAO,sCAAP;AACA,SAASC,OAAT,QAAwB,+BAAxB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC,C,CACA;;AACA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC5B,QAAMC,QAAQ,GAAGV,MAAM,EAAvB;AACA,QAAMW,WAAW,GAAGX,MAAM,EAA1B;AACA,QAAM;AAACY,IAAAA;AAAD,MAAUN,OAAO,EAAvB;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMgB,OAAO,GAAGT,UAAU,EAA1B,CAN4B,CAOhC;AACI;AACJ;AACA;AACA;;AACI,iBAAeU,YAAf,CAA4BC,KAA5B,EAAmC;AAC/BA,IAAAA,KAAK,CAACC,cAAN;;AAIA,QAAI;AACAN,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,UAAU,CAAC,IAAD,CAAV,CAFA,CAEiB;;AACjB,YAAMJ,KAAK,CAACF,QAAQ,CAACW,OAAT,CAAiBC,KAAlB,EAAyBX,WAAW,CAACU,OAAZ,CAAoBC,KAA7C,CAAX;AACAL,MAAAA,OAAO,CAACM,IAAR,CAAa,YAAb,EAJA,CAI2B;AAC9B,KALD,CAKE,MAAM;AACJT,MAAAA,QAAQ,CAAC,mBAAD,CAAR;AACH;;AACDE,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AAED,sBACI;AAAA,4BACA,QAAC,IAAD;AAAA,6BACI,QAAC,IAAD,CAAM,IAAN;AAAA,gCACI;AAAI,UAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKH,KAAK,iBAAI,QAAC,KAAD;AAAO,UAAA,OAAO,EAAC,QAAf;AAAA,oBAAyBA;AAAzB;AAAA;AAAA;AAAA;AAAA,gBAFd,eAGI,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAEK,YAAhB;AAAA,kCACI,QAAC,IAAD,CAAM,KAAN;AAAY,YAAA,EAAE,EAAC,OAAf;AAAA,oCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AAAc,cAAA,IAAI,EAAC,OAAnB;AAA2B,cAAA,GAAG,EAAER,QAAhC;AAA0C,cAAA,QAAQ;AAAlD;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAKI,QAAC,IAAD,CAAM,KAAN;AAAY,YAAA,EAAE,EAAC,UAAf;AAAA,oCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AAAc,cAAA,IAAI,EAAC,UAAnB;AAA8B,cAAA,GAAG,EAAEC,WAAnC;AAAgD,cAAA,QAAQ;AAAxD;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ,eASI,QAAC,MAAD;AAAQ,YAAA,QAAQ,EAAEI,OAAlB;AAA2B,YAAA,SAAS,EAAC,OAArC;AAA6C,YAAA,IAAI,EAAC,QAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAgBI;AAAK,UAAA,SAAS,EAAC,wBAAf;AAAA,iCACI,QAAC,IAAD;AAAM,YAAA,EAAE,EAAC,kBAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADA,eAuBA;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,mDACoB,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADpB;AAAA;AAAA;AAAA;AAAA;AAAA,YAvBA;AAAA,kBADJ;AA6BH,C,CAED;AACA;AACA;AACA;AACA;;GA/DwBN,K;UAGJH,O,EAGAE,U;;;KANIC,K","sourcesContent":["import React, {useRef, useState} from 'react'\nimport {Form, Button, Card, Alert} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { useAuth } from '../../../contexts/AuthContext'\nimport { Link, useHistory } from 'react-router-dom'\n//use histroy to redirect/navigate to dashboard after logged in or signedup\nexport default function Login() {\n    const emailRef = useRef()\n    const passwordRef = useRef()\n    const {login} = useAuth()\n    const [error, setError] = useState('')\n    const [loading, setLoading] = useState(false)\n    const history = useHistory()\n//were not loading my default so loading set to false\n    //use state emepty string because no error by default\n//preventdefault prevents our app from refreshing\n//if passwords do not match we do not complete the rest of the function and returns to origin state\n//we use async function we wait for sign up to complete if theres an error it will tell user and if not sign up successfulk\n    async function handleSubmit(event) {\n        event.preventDefault()\n\n        \n\n        try {\n            setError('')\n            setLoading(true) //prevents user clicking signup mutliple times and creating duplicate accounts\n            await login(emailRef.current.value, passwordRef.current.value)\n            history.push('/dashboard') //put url for dashboard in here\n        } catch {\n            setError('Failed to sign in')\n        }\n        setLoading(false)\n    }\n\n    return (\n        <>\n        <Card>\n            <Card.Body>\n                <h2 className='text-center mb-4'>Login</h2>\n                {error && <Alert variant='danger'>{error}</Alert>}\n                <Form onSubmit={handleSubmit}>\n                    <Form.Group id='email'>\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control type='email' ref={emailRef} required />\n                    </Form.Group>\n                    <Form.Group id='password'>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type='password' ref={passwordRef} required />\n                    </Form.Group>\n                    <Button disabled={loading} className='w-100' type='submit'>\n                        Login\n                    </Button>\n                </Form>\n                <div className='w-100 text-center mt-3'>\n                    <Link to='/forgot-password'>Forgot password?</Link>\n                </div>\n            </Card.Body>\n        </Card>\n        <div className='w-100 text-center mt-2'>\n           Need an account? <Link to='/sign-up'>Sign Up</Link>\n        </div>\n        </>\n    )\n}\n\n//button={loaidng} we do not want to be able to resubmit our form\n//curentuser starts off at null then sets itself, firebase sets local storage\n//and tokens so we can verify if we have a user already signed in\n//itll connect user for us using onauthstatechange\n//test current user {currentUser && currentUser.email} and     const {signup, currentUser} = useAuth()\n"]},"metadata":{},"sourceType":"module"}