{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/matthewharrison/Desktop/poplarclientapp/src/contexts/AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { auth } from '../firebase/firebase';\nconst AuthContext = /*#__PURE__*/React.createContext();\nexport function useAuth() {\n  _s();\n\n  return useContext(AuthContext);\n} //by default no user in usestate, set up current user so we know the current user\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n\n  function signup(email, password) {\n    return auth.createUserWithEmailAndPassword(email, password);\n  }\n\n  function login(email, password) {\n    return auth.signInWithEmailAndPassword(email, password);\n  }\n\n  function logout() {\n    return auth.signOut();\n  }\n\n  function resetPassword(email) {\n    return auth.sendPasswordResetEmail(email);\n  } //will return a promise so we know if the user signs in successfully, and eror message if theres a failure\n  //or redirect user well be linking the signup component\n  //we useEffect because we only want it to run once\n  //we want to unsubscribe wheneber were done, \n\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      setCurrentUser(user);\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []); //firebase has initial loading state we need to take care of\n  // return unsubscirbes us from listener once the component mounts\n  //firebase's way of notifying us when the user is set change and a user is present in our app\n  //allows us to set current user from function signup (user or null)\n  //whenever we call createuserwithemail and password it will call set current user and set user\n  //we want authonstatechanged in a use effect because we only want to run it when we mount our component\n\n  const value = {\n    currentUser,\n    login,\n    signup,\n    logout,\n    resetPassword\n  }; //in order to usecontext we pass in signup\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n} //if were not loading then render children, otherwise we dont render children\n//we dont render any of our app until we have currentuser set for the first time\n//we have access to usecontext thru useauth hook and we have auth provider that returns a value\n//that has all the info we want to provide in our authentication\n//context is for passing down props into children without having to pass props into each component (global state\n//we want our app to know that the user is logged in or out anywhere in the app\n// if we do not want to use firebase we just change this function for login and sign up\n//        return auth.signInWithEmailAndPassword(email, password)\n//        return auth.createUserWithEmailAndPassword(email, password)\n\n_s2(AuthProvider, \"1cdeWWSmbSz3cOWqWLAt+Ta4DMY=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/matthewharrison/Desktop/poplarclientapp/src/contexts/AuthContext.js"],"names":["React","useContext","useState","useEffect","auth","AuthContext","createContext","useAuth","AuthProvider","children","currentUser","setCurrentUser","loading","setLoading","signup","email","password","createUserWithEmailAndPassword","login","signInWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","unsubscribe","onAuthStateChanged","user","value"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,EAAqCC,SAArC,QAAqD,OAArD;AACA,SAASC,IAAT,QAAqB,sBAArB;AAEA,MAAMC,WAAW,gBAAGL,KAAK,CAACM,aAAN,EAApB;AAEA,OAAO,SAASC,OAAT,GAAmB;AAAA;;AACtB,SAAON,UAAU,CAACI,WAAD,CAAjB;AACH,C,CACD;;GAHgBE,O;;AAIhB,OAAO,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AAAA;;AACvC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,EAA9C;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;;AAEA,WAASY,MAAT,CAAgBC,KAAhB,EAAuBC,QAAvB,EAAiC;AAC7B,WAAOZ,IAAI,CAACa,8BAAL,CAAoCF,KAApC,EAA2CC,QAA3C,CAAP;AACH;;AAED,WAASE,KAAT,CAAeH,KAAf,EAAsBC,QAAtB,EAAgC;AAC5B,WAAOZ,IAAI,CAACe,0BAAL,CAAgCJ,KAAhC,EAAuCC,QAAvC,CAAP;AACH;;AAED,WAASI,MAAT,GAAkB;AACd,WAAOhB,IAAI,CAACiB,OAAL,EAAP;AACH;;AAED,WAASC,aAAT,CAAuBP,KAAvB,EAA8B;AAC1B,WAAOX,IAAI,CAACmB,sBAAL,CAA4BR,KAA5B,CAAP;AACH,GAlBsC,CAmB3C;AACA;AAEI;AACA;;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMqB,WAAW,GAAGpB,IAAI,CAACqB,kBAAL,CAAwBC,IAAI,IAAG;AAC/Cf,MAAAA,cAAc,CAACe,IAAD,CAAd;AACAb,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAHmB,CAApB;AAIA,WAAOW,WAAP;AACH,GANQ,EAMN,EANM,CAAT,CAxBuC,CA+BvC;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMG,KAAK,GAAG;AACVjB,IAAAA,WADU;AAEVQ,IAAAA,KAFU;AAGVJ,IAAAA,MAHU;AAIVM,IAAAA,MAJU;AAKVE,IAAAA;AALU,GAAd,CArCuC,CA4CvC;;AACA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEK,KAA7B;AAAA,cACK,CAACf,OAAD,IAAYH;AADjB;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,C,CACD;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;IA5DgBD,Y;;KAAAA,Y","sourcesContent":["import React, {useContext, useState, useEffect} from 'react';\nimport { auth } from '../firebase/firebase'\n\nconst AuthContext = React.createContext();\n\nexport function useAuth() {\n    return useContext(AuthContext)\n}\n//by default no user in usestate, set up current user so we know the current user\nexport function AuthProvider({ children }) {\n    const [currentUser, setCurrentUser] = useState()\n    const [loading, setLoading] = useState(true)\n\n    function signup(email, password) {\n        return auth.createUserWithEmailAndPassword(email, password)\n    }\n\n    function login(email, password) {\n        return auth.signInWithEmailAndPassword(email, password)\n    }\n\n    function logout() {\n        return auth.signOut()\n    }\n\n    function resetPassword(email) {\n        return auth.sendPasswordResetEmail(email)\n    }\n//will return a promise so we know if the user signs in successfully, and eror message if theres a failure\n//or redirect user well be linking the signup component\n\n    //we useEffect because we only want it to run once\n    //we want to unsubscribe wheneber were done, \n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged(user =>{\n            setCurrentUser(user)\n            setLoading(false)\n        })\n        return unsubscribe\n    }, [])\n    //firebase has initial loading state we need to take care of\n    // return unsubscirbes us from listener once the component mounts\n    //firebase's way of notifying us when the user is set change and a user is present in our app\n    //allows us to set current user from function signup (user or null)\n    //whenever we call createuserwithemail and password it will call set current user and set user\n    //we want authonstatechanged in a use effect because we only want to run it when we mount our component\n    const value = {\n        currentUser,\n        login,\n        signup, \n        logout,\n        resetPassword\n    }\n    //in order to usecontext we pass in signup\n    return (\n        <AuthContext.Provider value={value}>\n            {!loading && children}\n        </AuthContext.Provider>\n    )\n}\n//if were not loading then render children, otherwise we dont render children\n//we dont render any of our app until we have currentuser set for the first time\n//we have access to usecontext thru useauth hook and we have auth provider that returns a value\n//that has all the info we want to provide in our authentication\n//context is for passing down props into children without having to pass props into each component (global state\n//we want our app to know that the user is logged in or out anywhere in the app\n\n// if we do not want to use firebase we just change this function for login and sign up\n//        return auth.signInWithEmailAndPassword(email, password)\n//        return auth.createUserWithEmailAndPassword(email, password)\n\n"]},"metadata":{},"sourceType":"module"}